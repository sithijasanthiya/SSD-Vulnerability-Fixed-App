// packages
import path from "path";
import express from "express";
import dotenv from "dotenv";
import cookieParser from "cookie-parser";

// Import csurf middleware
import csrf from "csurf";

// Utiles
import connectDB from "./config/db.js";
import userRoutes from "./routes/userRoutes.js";
import categoryRoutes from "./routes/categoryRoutes.js";
import productRoutes from "./routes/productRoutes.js";
import uploadRoutes from "./routes/uploadRoutes.js";
import orderRoutes from "./routes/orderRoutes.js";

dotenv.config();
const port = process.env.PORT || 5000;

connectDB();

const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// Setup CSRF middleware
// Store CSRF token in a cookie

// Apply CSRF protection to routes handling state-changing actions (POST, PUT, DELETE)
// Routes requiring CSRF protection
const csrfProtection = csrf({
  cookie: {
    httpOnly: true,
    secure: false,
    sameSite: "lax",
  },
});

// //check csrf token in header
// app.use((req, res, next) => {
//   console.log("CSRF Token from Header:", req.headers["x-csrf-token"]);
//   next();
// });

// CSRF token route to send token to frontend
app.get("/api/csrf-token", (req, res) => {
  app.use(csrfProtection);
  const csrfToken = req.csrfToken();
  res.cookie("_csrf", csrfToken);
  console.log("CSRF Token sent to client:", csrfToken);
  res.json({ csrfToken });
});

app.use("/api/users", userRoutes);
// app.use("/api/users", userRoutes);
app.use("/api/category", categoryRoutes);
app.use("/api/products", productRoutes);
app.use("/api/upload", uploadRoutes);
app.use("/api/orders", orderRoutes);

app.get("/api/config/paypal", (req, res) => {
  res.send({ clientId: process.env.PAYPAL_CLIENT_ID });
});

const __dirname = path.resolve();
app.use("/uploads", express.static(path.join(__dirname + "/uploads")));

app.listen(port, () => console.log(`Server running on port: ${port}`));
